body file control
{
        inputs => { "$(sys.libdir)/stdlib.cf" };
}

bundle common def
{
  vars:
      "tide" data => '{
  sketchdirs: ["/tmp/tide/sketches"],
  force_install: true,
  install: { "$(this.promise_dirname)/../sketches": [ "system/motd/sketch.json" ] },
  uninstall: [ "System::motd" ],
}';
}

bundle agent tide_setup(sketchdir)
{
  vars:
      "sketchfiles" slist => findfiles("$(sketchdir)/**/sketch.json");
  methods:
      "" usebundle => tide_load($(sketchdir), regex_replace($(sketchfiles), "$(sketchdir)/", "", "T"), canonifyuniquely($(sketchfiles))),
        unless => and(strcmp(0, length(sketchfiles)));

  reports:
    verbose_mode::
      "$(this.bundle): Found sketch $(sketchfiles)";
}

# The standard key is canonifyuniquely(sketchfile) but we can supply a different
# key if we want to load without interfering with the standard load.
#
# For a sketch in /var/lib/sketches/system/motd/sketch.json, the sketchdir is
# `/var/lib/sketches`, the sketchfile is `system/motd/sketch.json`, and the key
# is up to the caller.
bundle agent tide_load(sketchdir, basefile, key)
{
  classes:
      "loaded" expression => isvariable("definition");
      "have_metadata" expression => isvariable("metadata");
      "have_manifest" expression => isvariable("manifest");
      "have_name" expression => isvariable("metadata[name]"),
        if => "have_metadata";

      "tide_usable_$(key)"
        and => { "loaded",
                "have_metadata",
                "have_manifest",
                "have_name",
        },
        meta => {
                 "sketchdir=$(sketchdir)",
                 "dir=$(dir)",
                 "name=$(metadata[name])",
                 "sketchfile=$(sketchfile)",
        },
        scope => "namespace";

  vars:
      "sketchfile" string => "$(sketchdir)/$(basefile)";
      "definition" data => readjson($(sketchfile));
      "dir" string => dirname($(basefile));
      "metadata" data => mergedata("definition[metadata]"),
        if => isvariable("definition");
      "manifest" data => mergedata("definition[manifest]"),
        if => isvariable("definition");

  reports:
    verbose_mode::
      "$(this.bundle): Found sketch $(sketchfile)";

    "inform_mode.loaded"::
      "$(this.bundle): Loaded sketch $(sketchfile)";

    "verbose_mode.loaded"::
      "$(this.bundle): Loaded sketch $(sketchfile): classname=tide_usable_$(key) sketchdir=$(sketchdir) dir=$(dir) name=$(metadata[name]) sketchfile=$(sketchfile)";

    "!loaded"::
      "$(this.bundle): Could not load sketch $(sketchfile)";

    "!have_metadata"::
      "$(this.bundle): Could not load sketch metadata of $(sketchfile)";

    "!have_manifest"::
      "$(this.bundle): Could not load sketch manifest of $(sketchfile)";

    "!have_name"::
      "$(this.bundle): Could not get the sketch name from the metadata of $(sketchfile)";
}

bundle agent tide_manage
{
  classes:
      "tide_force_install" expression => "$(def.tide[force_install])", scope => "namespace";
  vars:
      "tide_sketchdirs" slist => getvalues("def.tide[sketchdirs]");
      "tide_main_sketchdir" string => nth(tide_sketchdirs, 0);

  methods:
      "" usebundle => tide_setup($(tide_sketchdirs));
      "" usebundle => tide_uninstall(@(def.tide));
      "" usebundle => tide_install(@(def.tide));

  reports:
    inform_mode::
      "$(this.bundle): TIDE management";
}

bundle agent tide_uninstall(definitions)
{
  vars:
      "uninstalls" slist => getvalues("definitions[uninstall]");
      "target_dir" slist => getvalues("definitions[sketchdirs]");

  methods:
      "" usebundle => tide_uninstall_sketch($(uninstalls), $(target_dir)),
        if => isvariable(uninstalls);

  reports:
    inform_mode::
      "$(this.bundle): TIDE Uninstall stage";
      "$(this.bundle): TIDE Uninstall stage: uninstalling $(uninstalls) from $(target_dir)"
        if => isvariable(uninstalls);
}

bundle agent tide_uninstall_sketch(name, sketchdir)
{
  vars:
      "usable_classname" string => nth(classesmatching("tide_usable_.*", "name=$(name)"), 0);
    "$(usable_classname)"::
      "sketchfile" string => regex_replace(join(",", grep("^sketchfile=.*", getclassmetatags($(usable_classname)))), "^sketchfile=", "", "T");


  methods:
    "$(usable_classname)"::
      "" usebundle => tide_uninstall_sketch_files($(name), dirname($(sketchfile))),
        if => fileexists($(sketchfile)),
        classes => scoped_classes_generic("bundle", "uninstall");

  reports:
    inform_mode::
      "$(this.bundle): Uninstalling sketch $(name) from $(sketchfile)";
    "!$(usable_classname)"::
      "$(this.bundle): Sketch $(name) is unknown, sorry";
    uninstall_not_ok::
      "$(this.bundle): Failed to uninstall sketch $(name) from $(sketchfile), sorry";
}

bundle agent tide_uninstall_sketch_files(name, basedir)
{
  methods:
      "" usebundle => rm_rf("$(basedir)/");

  reports:
    inform_mode::
      "$(this.bundle): Uninstalling sketch files for $(name) from $(basedir)";
}

bundle agent tide_install(definitions)
{
  vars:
      "installs" data => mergedata("definitions[install]");
      "repositories" slist => getindices(installs);
      "target_dir" string => "$(tide_manage.tide_main_sketchdir)";

  methods:
      "" usebundle => tide_install_sketches(@(installs), $(repositories), $(target_dir));

  reports:
    inform_mode::
      "$(this.bundle): TIDE Install stage";
      "$(this.bundle): TIDE Install stage: installing from repository $(repositories) to $(target_dir)";
}

bundle agent tide_install_sketches(installs, repository, sketchdir)
{
  vars:
      "repo_installs" data => mergedata("installs[$(repository)]");
      "repo_installs_str" string => format("%S", repo_installs);
      "source_files" slist => getvalues(repo_installs);

  methods:
      "" usebundle => tide_install_sketch($(source_files), $(repository), $(sketchdir));

  reports:
    inform_mode::
      "$(this.bundle): Installing sketches from repository $(repository) to $(sketchdir)";
      "$(this.bundle): Installing sketches $(source_files) from repository $(repository) to $(sketchdir)";
}

bundle agent tide_install_sketch(source_file, repository, sketchdir)
{
  classes:
      # install if there is no usable sketch by that name OR we are force-installing
      "install_needed" not => "tide_usable_$(dest_key)";
      "install_needed" expression => "tide_force_install";

  vars:
      "source_full_file" string => "$(repository)/$(source_file)";
      "source_dir" string => dirname($(source_file));
      "dest_full_file" string => "$(sketchdir)/$(source_file)";
      "dest_key" string => canonifyuniquely($(dest_full_file));

      "definition" data => readjson($(source_full_file));
      "metadata" data => mergedata("definition[metadata]"),
        if => isvariable("definition");
      "manifest" data => mergedata("definition[manifest]"),
        if => isvariable("definition");

  methods:
    install_needed::
      "" usebundle => tide_install_sketch_files(@(metadata), @(manifest), $(repository), $(source_dir), $(sketchdir)),
        classes => scoped_classes_generic("bundle", "install");
    install_ok::
      "" usebundle => tide_load($(sketchdir), $(source_file), $(dest_key));

  reports:
    inform_mode::
      "$(this.bundle): Installing sketch $(source_file) from repository $(repository) to $(dest_full_file)";
    tide_force_install::
      "$(this.bundle): Forcing installation because force_install is set";
    "!install_ok.tide_usable_$(dest_key)"::
      "$(this.bundle): Sketch $(metadata[name]) is already installed and usable";
    install_ok::
      "$(this.bundle): Sketch $(metadata[name]) is now installed and usable";
}

bundle agent tide_install_sketch_files(metadata, manifest, repository, source_dir, sketchdir)
{
  vars:
      "todo" slist => { getindices(manifest), "sketch.json" };
      "todo_str" string => format("%S", todo);

  methods:
      "" usebundle => file_copy("$(repository)/$(source_dir)/$(todo)", "$(sketchdir)/$(source_dir)/$(todo)");

  files:
      "$(sketchdir)/$(source_dir)/$(todo)" perms => m("600"),
        if => fileexists("$(sketchdir)/$(source_dir)/$(todo)");

  reports:
    inform_mode::
      "$(this.bundle): Installing sketch files for $(metadata[name]) from repository $(repository) to $(sketchdir): $(todo_str)";
}
